# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /*path/                                                     @controllers.Application.removeTrail(path)

#GET     /admin/reset                                                @controllers.Application.reset()
GET     /admin/seed                                                 @controllers.Application.seed(users: Int ?= 200, projects: Int ?= 1, versions: Int ?= 2, channels: Int ?= 2)
#GET     /admin/migrate                                              @controllers.Application.migrate()
GET     /admin/queue                                                @controllers.Application.showQueue()
GET     /admin/flags                                                @controllers.Application.showFlags()
GET     /admin/flags/:id/resolve/:resolved                          @controllers.Application.setFlagResolved(id: Int, resolved: Boolean)
GET     /admin/health                                               @controllers.Application.showHealth()

GET     /statusz                                                    @controllers.ApiController.showStatusZ()

# ---------- Service Worker ----------
GET     /sw.js                                                      controllers.Assets.at(path="/public", file="sw.js")
GET     /offline                                                    @controllers.Application.showOffline()

# ---------- API (v1) ----------
GET     /api/projects                                               @controllers.ApiController.listProjects(version = "v1", categories: Option[String], sort: Option[Int], q: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/projects/:pluginId                                     @controllers.ApiController.showProject(version = "v1", pluginId)

POST    /api/projects/:pluginId/keys/new                            @controllers.ApiController.createKey(version = "v1", pluginId)
POST    /api/projects/:pluginId/keys/revoke                         @controllers.ApiController.revokeKey(version = "v1", pluginId)

GET     /api/projects/:pluginId/versions                            @controllers.ApiController.listVersions(version = "v1", pluginId, channels: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/projects/:pluginId/versions/:name                      @controllers.ApiController.showVersion(version = "v1", pluginId, name)
POST    /api/projects/:pluginId/versions/:name                      @controllers.ApiController.deployVersion(version = "v1", pluginId, name)

GET     /api/projects/:pluginId/pages                               @controllers.ApiController.listPages(version = "v1", pluginId, parentId: Option[Int])

GET     /api/projects/:pluginId/versions/recommended/download       @controllers.project.Versions.downloadRecommendedJarById(pluginId, token: Option[String])
GET     /api/projects/:pluginId/versions/recommended/signature      @controllers.project.Versions.downloadRecommendedSignatureById(pluginId)
GET     /api/projects/:pluginId/versions/:name/download             @controllers.project.Versions.downloadJarById(pluginId, name, token: Option[String])
GET     /api/projects/:pluginId/versions/:name/signature            @controllers.project.Versions.downloadSignatureById(pluginId, name)

GET     /api/users                                                  @controllers.ApiController.listUsers(version = "v1", limit: Option[Int], offset: Option[Int])
GET     /api/users/:user                                            @controllers.ApiController.showUser(version = "v1", user)

GET     /api/:version/projects                                      @controllers.ApiController.listProjects(version, categories: Option[String], sort: Option[Int], q: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/:version/projects/:pluginId                            @controllers.ApiController.showProject(version, pluginId)

GET     /api/:version/projects/:pluginId/versions                   @controllers.ApiController.listVersions(version, pluginId, channels: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/:version/projects/:pluginId/versions/:name             @controllers.ApiController.showVersion(version, pluginId, name)
POST    /api/:version/projects/:pluginId/versions/:name             @controllers.ApiController.deployVersion(version, pluginId, name)

GET     /api/:version/projects/:pluginId/pages                      @controllers.ApiController.listPages(version, pluginId, parentId: Option[Int])

GET     /api/:version/users                                         @controllers.ApiController.listUsers(version, limit: Option[Int], offset: Option[Int])
GET     /api/:version/users/:user                                   @controllers.ApiController.showUser(version, user)


# ---------- Application ----------

GET     /                                                           @controllers.Application.showHome(categories: Option[String], q: Option[String], sort: Option[Int], page: Option[Int], platform: Option[String])
GET     /signup                                                     @controllers.Users.signUp()
GET     /login                                                      @controllers.Users.logIn(sso: Option[String], sig: Option[String], returnUrl: Option[String])
GET     /logout                                                     @controllers.Users.logOut(returnUrl: Option[String])
POST    /verify                                                     @controllers.Users.verify(returnPath: Option[String])

# ---------- Projects ----------

GET     /p/:pluginId                                                @controllers.project.Projects.showProjectById(pluginId)

GET     /new                                                        @controllers.project.Projects.showCreator()

POST    /new/upload                                                 @controllers.project.Projects.upload()
GET     /new/:author/:slug                                          @controllers.project.Projects.showCreatorWithMeta(author, slug)
POST    /new/:author/:slug/members                                  @controllers.project.Projects.showInvitationForm(author, slug)

POST    /invite/:id/:status                                         @controllers.project.Projects.setInviteStatus(id: Int, status)

POST    /pages/preview                                              @controllers.project.Pages.showPreview()

# ---------- Organizations ----------

GET     /organizations/new                                          @controllers.Organizations.showCreator()
POST    /organizations/new                                          @controllers.Organizations.create()

POST    /organizations/invite/:id/:status                           @controllers.Organizations.setInviteStatus(id: Int, status)

POST    /organizations/:organization/settings/avatar                @controllers.Organizations.updateAvatar(organization)
POST    /organizations/:organization/settings/members               @controllers.Organizations.updateMembers(organization)
POST    /organizations/:organization/settings/members/remove        @controllers.Organizations.removeMember(organization)

# ---------- Users ----------
GET     /authors                                                    @controllers.Users.showAuthors(sort: Option[String], page: Option[Int])

GET     /notifications                                              @controllers.Users.showNotifications(notificationFilter: Option[String], inviteFilter: Option[String])
POST    /notifications/read/:id                                     @controllers.Users.markNotificationRead(id: Int)

POST    /prompts/read/:id                                           @controllers.Users.markPromptRead(id: Int)

GET     /:user                                                      @controllers.Users.showProjects(user, page: Option[Int])
POST    /:user/settings/tagline                                     @controllers.Users.saveTagline(user)
POST    /:user/settings/lock/:locked                                @controllers.Users.setLocked(user, locked: Boolean, sso: Option[String], sig: Option[String])
POST    /:user/settings/pgp                                         @controllers.Users.savePgpPublicKey(user)
GET     /:user/settings/pgp/delete                                  @controllers.Users.deletePgpPublicKey(user, sso: Option[String], sig: Option[String])
# -------- End Users --------

POST    /:author/:slug                                              @controllers.project.Projects.showFirstVersionCreator(author, slug)
GET     /:author/:slug                                              @controllers.project.Projects.show(author, slug)
POST    /:author/:slug/star/:starred                                @controllers.project.Projects.setStarred(author, slug, starred: Boolean)
POST    /:author/:slug/flag                                         @controllers.project.Projects.flag(author, slug)
POST    /:author/:slug/visible/:visible                             @controllers.project.Projects.setVisible(author, slug, visible: Boolean)
POST    /:author/:slug/watch/:watching                              @controllers.project.Projects.setWatching(author, slug, watching: Boolean)

GET     /:author/:slug/discuss                                      @controllers.project.Projects.showDiscussion(author, slug)
POST    /:author/:slug/discuss/reply                                @controllers.project.Projects.postDiscussionReply(author, slug)

GET     /:author/:slug/manage                                       @controllers.project.Projects.showSettings(author, slug)
POST    /:author/:slug/manage/save                                  @controllers.project.Projects.save(author, slug)
POST    /:author/:slug/manage/rename                                @controllers.project.Projects.rename(author, slug)
POST    /:author/:slug/manage/delete                                @controllers.project.Projects.delete(author, slug)
POST    /:author/:slug/manage/members/remove                        @controllers.project.Projects.removeMember(author, slug)

GET     /:author/:slug/log                                          @controllers.project.Projects.showLog(author, slug)

GET     /:author/:slug/issues                                       @controllers.project.Projects.showIssues(author, slug)
GET     /:author/:slug/source                                       @controllers.project.Projects.showSource(author, slug)

GET     /:author/:slug/icon                                         @controllers.project.Projects.showIcon(author, slug)
POST    /:author/:slug/icon                                         @controllers.project.Projects.uploadIcon(author, slug)
POST    /:author/:slug/icon/reset                                   @controllers.project.Projects.resetIcon(author, slug)
GET     /:author/:slug/icon/pending                                 @controllers.project.Projects.showPendingIcon(author, slug)
# ------- End Projects ---------


# ---------- Pages ----------

GET     /:author/:slug/pages/:page/edit                             @controllers.project.Pages.showEditor(author, slug, page)
POST    /:author/:slug/pages/:page/edit                             @controllers.project.Pages.save(author, slug, page)
POST    /:author/:slug/pages/:page/delete                           @controllers.project.Pages.delete(author, slug, page)
GET     /:author/:slug/pages/:page                                  @controllers.project.Pages.show(author, slug, page)


# ---------- Channels ----------

GET     /:author/:slug/channels                                     @controllers.project.Channels.showList(author, slug)
POST    /:author/:slug/channels                                     @controllers.project.Channels.create(author, slug)
POST    /:author/:slug/channels/:channel                            @controllers.project.Channels.save(author, slug, channel)
POST    /:author/:slug/channels/:channel/delete                     @controllers.project.Channels.delete(author, slug, channel)


# ---------- Versions ----------

GET     /:author/:slug/versions                                     @controllers.project.Versions.showList(author, slug, channels: Option[String], page: Option[Int])

POST    /:author/:slug/versions/:version/approve                    @controllers.project.Versions.approve(author, slug, version)
POST    /:author/:slug/versions/:version/delete                     @controllers.project.Versions.delete(author, slug, version)

GET     /:author/:slug/versions/:version/confirm                    @controllers.project.Versions.showDownloadConfirm(author, slug, version, downloadType: Option[Int], api: Option[Boolean])
POST    /:author/:slug/versions/:version/confirm                    @controllers.project.Versions.confirmDownload(author, slug, version, downloadType: Option[Int], token)

GET     /:author/:slug/versions/recommended/download                @controllers.project.Versions.downloadRecommended(author, slug, token: Option[String])
GET     /:author/:slug/versions/recommended/signature               @controllers.project.Versions.downloadRecommendedSignature(author, slug)
GET     /:author/:slug/versions/:version/download                   @controllers.project.Versions.download(author, slug, version, token: Option[String])
GET     /:author/:slug/versions/:version/signature                  @controllers.project.Versions.downloadSignature(author, slug, version)

GET     /:author/:slug/versions/recommended/jar                     @controllers.project.Versions.downloadRecommendedJar(author, slug, token: Option[String])
GET     /:author/:slug/versions/:version/jar                        @controllers.project.Versions.downloadJar(author, slug, version, token: Option[String])

GET     /:author/:slug/versions/new                                 @controllers.project.Versions.showCreator(author, slug)
POST    /:author/:slug/versions/new/upload                          @controllers.project.Versions.upload(author, slug)
GET     /:author/:slug/versions/new/:version                        @controllers.project.Versions.showCreatorWithMeta(author, slug, version)

POST    /:author/:slug/versions/:version                            @controllers.project.Versions.publish(author, slug, version)
GET     /:author/:slug/versions/:version                            @controllers.project.Versions.show(author, slug, version)
POST    /:author/:slug/versions/:version/save                       @controllers.project.Versions.saveDescription(author, slug, version)
POST    /:author/:slug/versions/:version/recommended                @controllers.project.Versions.setRecommended(author, slug, version)


# ---------- Other ----------

GET     /assets/*file                                               controllers.Assets.at(path="/public", file)
